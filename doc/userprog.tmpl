             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Irina-Elena Veliche <irina-elena.veliche11@imperial.ac.uk>
Paul Rowe-White <paul.rowe-white11@imperial.ac.uk>
Andrei Bogdan Antonescu <andrei.antonescu11@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In process_execute() two copies of the file name that is passed in are made.
This is beacuse the file name passed in is const and includes the program
arguments. One copy of the file name including arguments is tokenised to
extract just the file name and then this is passed into thread_create() as the 
file name to run. The other copy is not modified and just passed through to
thread_create() as the argument to be given to the start_process function.
 
In start_process() the string of the file name and all of the arguments is
tokenised to extract the file name and then this is passed to the load
function. Once this is complete, set_up_user_prog_stack() is called to set up
the stack. In this functionm the file name is put on the thread's stack by 
moving the stack pointer down by the length of the string including the NULL 
byte and the number of arguments is incremented. strtok_r is then called again 
and the same process is done for each of the arguments so the arguments are on 
the stack in the order they were in the original string. The stack pointer is 
then saved so there is a pointer to the last argument to be used later. The 
stack pointer is then rounded down to a multiple of 4 and the NULL sentinel is 
pushed onto the stack. Now the pointers to the arguments (elements of argv) 
need to be pushed on the stack in reverse order. To do this the saved pointer 
to the last argument is used to walk back down the stack independantly from the
current stack pointer which still points to the top of the stack. Whenever a 
NULL byte is found, a pointer to the character below it on the stack is pushed
on the top of the stack as this is a pointer to the start character of the next 
argument string. This is done until the number of pointers pushed is the same as
the number of arguments, so all argument pointers are pushed. Thus the pointers
are pushed in the reverse order to the order in which the argument strings were 
pushed and so they are in the order required (reverse order to the order in the
original string.

To avoid overflowing the stack, as each argument is pushed the difference
between PHYS_BASE and the current stack pointer is evaluated. If this is
greater than 4096 bytes then no more arguments are pushed on the stack and the
process exits. This limit was chosen so that all arguments will fit in a simple
page of memory.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() and strtok_r() are both functions for tokenising strings. Both take a
string to be tokenised and a string of delimiters. However strtok_r() takes an
extra argument that maintains the current position in the string to tokenise
between calls. strtok() does not take this argument as it uses a global static
buffer so it is not thread safe as if threads calling strtok() are interleaved
the both will try to write to the global buffer and so will corrupt the buffer
for the other running threads. strtok_r() is thread safe so this is used in
Pintos as threads can be interleaved.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The shell can have aliases for executable names eg. just typing the name without
the full path to it or the full path in stored in the PATH variable for
convenience. The shell can then expand the path to the executable before passing
it onto the kernel. This saves the user from having to type the full path
for a command everytime it is run.
 
The shell can also support multiple commands on one line, passing the output of
one command as an argument to the next. The shell can do
this as it can split each of the commands into the execuatable name and
arguments and then run one after the other, passing the output as an argument.
Passing the same string to the kernel could make it try to execute the first
command and the second command would be treated as an argument to the first.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Process identifier. */
typedef int pid_t;
/* File identifier. */
typedef int fid_t;

/* Static sys calls definitions */
static void      sys_halt (void);
static void      sys_exit (int status);
static pid_t     sys_exec (const char *file);
static int       sys_wait (pid_t pid);
static bool      sys_create (const char *file, unsigned initial_size);
static bool      sys_remove (const char *file);
static int       sys_open (const char *file);
static int       sys_filesize (int fd);
static int       sys_read (int fd, void *buffer, unsigned size);
static int       sys_write (int fd, const void *buffer, unsigned size);
static void      sys_seek (int fd, unsigned position);
static unsigned  sys_tell (int fd);
static void      sys_close (int fd);

/* Additional data to hold a file identifier and a thread elem for each thread file list
struct user_file
  {
    struct file *file;                 /* Pointer to the actual file */
    fid_t fid;                         /* File identifier */
    struct list_elem thread_elem;      /* List elem for a thread's file list */
  };
*/

/* Get a pointer to a user file from a thread's list */
static struct user_file *file_by_fid (fid_t);

/* Allocates a new fid by using a static variable */
static fid_t allocate_fid (void);

/* Lock to ensure synchronization on file operations */
static struct lock file_lock;

/* The generic system call argument can replace any sys call function
 signature */
typedef int (*handler) (uint32_t, uint32_t, uint32_t);

/* An array to map every sys call function to its unique identifier 
from syscall-nr.h. After the initial mapping we can get the required
function to call in just one line. */
static handler syscall_map[32];

/* Added to structure thread */
struct thread 
  {
    ...
#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    struct semaphore sema_wait;         /* Semaphore for process_wait. */
    struct semaphore sema_exit;         /* Semaphore for process_exit. */
    struct thread *parent;              /* The parent of the thread */
    struct file *exec;                  /* The file containing the thread executable */
    struct list files;                  /* A list of open files */
    struct list children;               /* A list of children process */
    struct list_elem child_elem;        /* List elem for children list */
    int ret_status;                     /* Return status. */
    bool exited;                        /* If the process exited? */
    bool waited;                        /* If parent thread has called wait */
#endif
    ...
}

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

We created a static function allocate_fid based on the same logic as 
allocate_tid from thread.c. Inside the function we have a static counter
variable that gets incremented each time we need a new file descriptor.
This is the easiest way to get a unique fid and there no point in having
the same file descriptor for different processes. 

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

As we were advised in the specification, for each access we only check if
the address is in the user space. When we have strings to read or write it's
enough to verify whether the start and the end addresses are bellow PYS_BASE. On 
each system call function we check that all the arguments are in user space.
If we have an invalid pointer or an unmapped page we check it in the page fault
handler and kill the running process. This approach seems to be faster as it
takes advantage of the processor's MMU. In the page fault handler we continue 
to trigger a page fault only in the case of a kernel signal.  
 
>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

First we have to consider the number of calls used to set up the stack and load
the segments of the program. For these operations we always have 4 inspections
because for each user page we make an alias to a kernel page. 

After the initialization step that number only depends if the data spans 
over one or two pages. We check for each page once, so the least number for 
4,096 bytes is 1 function call and the greatest is 2. If we want to write only 2 
bytes the situation is similar and could still result in 2 page checks if we 
have a byte on each page. 

One way to improve these numbers is by loading the segments of the program in a
lazy manner. So if we have an invalid access we don't have to load all the pages
in advance. However this doesn't bring any advantage in the average case when 
all accesses are valid. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

To implement the "wait" system call we added some extra fields in the structure
of a thread like a list of children and a reference to its parent. Also each
thread has a ret_status field that is initialized with a default status and 
it's changed on the exit system call or if an error results during loading.
We also keep track if the process has waited and wherever it's alive.

When the "wait" system call is called we start process_wait. First we get the 
thread with the corresponding tid from the all threads list. If we don't find 
the thread, the child thread has a different parent or we have already waited 
for it we just return an error. 

The second case is when the child thread has finished its job and waits before 
exiting, knowing there is still a parent that might call wait. Then we simply 
return the child final status and continue. Note that even if a child has 
already exited it still remains to wait on semaphore, down until his parent has
exited, before freeing its thread structure so we can still get its return 
status.

The last case is when the child thread is still running so we put the current 
thread to wait with down on sema_wait semaphore paired up called when the child 
thread exits. We use two paired semaphore for exit and for wait to assure the 
synchronization works as expected in all cases. So we ensured that when a child 
exits it will allow the waiting parent to get its return status and after wait 
for its parent to exit before freeing the thread structure.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We have two ways to protect a system call from an invalid access. First we check
in the system call handler, before actually initiating the call, that all the 
parameters are in user space as described above. In the case of write or read 
sys calls we also check the buffer spans in user space. On file handling calls
we check that the file is owned by the current thread and use a file lock to 
synchronize access. Secondly, we modified the page fault handle to find an
invalid access or an unmapped page. All these check will result in the process
begin terminated by following the exit sys call. 

In the sys exit call we make sure that any resources held by the current process
are freed. First we release the file lock if an error occurred during a file 
access. After that we iterate over all its opened files, free the user file
structure and remove it from its thread file list. Then the function calls 
thread exit. Here we perform a semaphore up on all thread's children and clear 
the children list. After that we call process exit which will first wait if 
necessary for its parent and clear all the waiters threads. Finally we 
switch page directories and free its own page directory.

For example we could experience a bad pointer value during the write system 
call. This will be captured in the initial checks or in the page fault handler.
In either case we will call sys exit, thread exit and then process execute. As 
described above this logic will clear all children mappings and free all the 
process resources including all the files, locks, semaphores, page directory 
and structure thread.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We are using a semaphore to ensure synchronization between the parent and the
child process. After the child thread is created we perform a semaphore down
operation on the parent until the child calls semaphore up when loading has 
finished. In case of an unsuccessful load the child return status is set to 
error before the semaphore operation awakes the parent. Therefore the parent 
thread will know before returning from exec if the child started successfully 
and returns as required a valid tid or -1.

We were able to use the same semaphore from process wait to minimize the memory
occupied by the structure thread. Because the child only performs a semaphore 
up when loading or exiting the parent can accordingly wait for loading or for 
the actual system "wait" call. The load and exit semaphore up operations always 
happen in this order even in the case of an unsuccessful load, so any possible 
race condition in the parent thread is avoided. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When the parent process P calls wait on child process C before C exits, we put
the current thread to wait on 'sema_wait' semaphore down. When C exits it will
perform semaphore up and release the parent thread. In order to ensure proper
synchronization and avoid race conditions, we used two semaphores for wait
and exit. Therefore, when process C exits it will allow P to get its return
status and it will then wait for P to exit before freeing the thread structure.

In the case when a child thread has finished its job and enteres the process
exit function, it will remain to wait on the semaphore down, until its parent
has exited, before freeing its thread structure in order to allow the parent
to still get its return status.

When P terminates without waiting, before C exits, C will put sema_up on
semaphore 'sema_wait' and it will not wait on sema_down for sema_exit, as
P has already given up the semaphore when it finished. When P terminates
without waiting, after C exits, C will wait until P finished before freeing
the thread structure.

As explained above in B6 this logic will free all the resources held by
the process and thread in process_exit and thread_exit respectively.

A special case is the initial thread, the one running the kernel. All its
children won't wait for it because the kernel thread won't use a exit system
call.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

To access user memory from the kernel we use the function is_user_vaddr,
which verifies for each access if the address is in the user space. In
the case of the system calls that require memory like read and write, it's
enough to check if the start and end address are below PHYS_BASE. For the
rest of the system calls we check if the arguments are inside the user space.
In the case of an invalid pointer or an unmapped page we check it in the
page_fault handler and kill the running process. We continue to trigger a page
fault in the page fault handler only in the case of a kernel signal.

We chose to implement it in this way because of simplicity and unity. This
approach also seems to be faster as it takes advantage of the processor's MMU.
Another advantage is that it potentially reduces the resource waste. For each
call we check the address provided and if it is not valid the process will be
killed instead of letting it execute for some time.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

In our implementations each process maintains a list of opened user files each of
them with a unique fid. 

The advantages are that we don't have to search through all files to see if a
file is owned by the current thread. Also we can obtain fast the list of all
files for a thread. In terms of memory is also quite efficient because we have
to store besides the opened file and its corresponding fid, only a pointer to
its structure per thread. 

A disadvantage to our approach is that we have to iterate through all the files
of a thread on each operation, but this is not a big issue as this list is 
typically small. We considered also other approaches like maintaining an array 
to have access but that would result in a waste of memory and a limited number 
of opened files. 

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We used the default implementation for the purpose of clarity and we couldn't
find any major advantage in creating an auxiliary mapping. 

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?
